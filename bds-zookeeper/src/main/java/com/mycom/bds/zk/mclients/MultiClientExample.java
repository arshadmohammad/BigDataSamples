package com.mycom.bds.zk.mclients;

import java.io.File;
import java.util.concurrent.CountDownLatch;

import org.apache.zookeeper.CreateMode;
import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.apache.zookeeper.Watcher.Event.EventType;
import org.apache.zookeeper.Watcher.Event.KeeperState;
import org.apache.zookeeper.ZooDefs;
import org.apache.zookeeper.ZooKeeper;
import org.apache.zookeeper.client.ZKClientConfig;
import org.apache.zookeeper.data.Stat;
import org.apache.zookeeper.server.quorum.QuorumPeerConfig.ConfigException;

/**
 * This is sample program demonstrating usage of <code>ZKClientConfig<code> for
 * multiple clients with different configuration in a single JVM. It connects to
 * two ZooKeeper cluster where one is secure(SSL enabled) other is not. For more
 * detail please refer ZOOKEEPER-2139
 * 
 * <pre>
 * To make this example work do following:
 * 1) Start one secure and one non-secure cluster or configure both secure and non secure port on the same cluster and start it.
 * 2) Replace some_path with actual path where the corresponding files exist.
 * 3) Replace some_pass with actual password.
 * 4) Correct the values of secureCxnString and secureCxnString variables.
 * </pre>
 * 
 * Here is the output generated by the is sample program continuously,
 * indicating that both secure and non-secure running simultaneously
 * 
 * <pre>
 * Updated data to znode '/secure'
 * Updated data to znode '/nonSecure'
 * Updated data to znode '/secure'
 * Updated data to znode '/nonSecure'
 * ......
 * </pre>
 */
public class MultiClientExample {
    // path where all the configuration files are kept
    private String configPath = "some_path";

    public static void main(String[] args) {
        MultiClientExample clientExample = new MultiClientExample();
        try {
            clientExample.testMultiClients();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void testMultiClients() throws Exception {
        // connect to secure client
        String secureCxnString = "192.168.1.10:3181,192.168.1.10:3182,192.168.1.10:3183";
        ZooKeeper secure = connectToZookeeper(getSecureConfig(), secureCxnString);
        ZKOperationThread client1 = new ZKOperationThread(secure, "/secure");

        // connect to non secure client
        String nonSecureCxnString = "192.168.1.20:2181,192.168.1.20:2182,192.168.1.20:2183";
        final ZooKeeper nonSecureClient = connectToZookeeper(getNonSecureConfig(), nonSecureCxnString);
        ZKOperationThread client2 = new ZKOperationThread(nonSecureClient, "/nonSecure");

        // start operations on secure cluster
        client1.start();
        // start operations on non secure cluster
        client2.start();

        // wait till both the clients have done their work
        Thread.currentThread().join();
        System.out.println("Done");
    }

    private void doZKOperations(ZooKeeper zooKeeper, String path) throws KeeperException, InterruptedException {
        Stat exists = zooKeeper.exists(path, null);
        if (null == exists) {
            zooKeeper.create(path, "".getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
            System.out.println("Created znode '" + path + "'");
        } else {
            zooKeeper.setData(path, Long.toString(System.currentTimeMillis()).getBytes(), -1);
            System.out.println("Updated data to znode '" + path + "'");
        }

    }

    private ZooKeeper connectToZookeeper(ZKClientConfig conf, String cxnString) throws Exception {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ZKWatcher watcher = new ZKWatcher(conf, cxnString, countDownLatch);
        ZooKeeper zooKeeper = new ZooKeeper(cxnString, 40000, watcher, conf);
        countDownLatch.await();
        System.out.println("Connected to " + zooKeeper.toString());
        return zooKeeper;
    }

    private ZKClientConfig getSecureConfig() throws ConfigException {
        // Get common configurations which are applicable for all the clients
        ZKClientConfig conf = getCommonConfig();
        // set properties which are must for connecting to secure server
        conf.setProperty(ZKClientConfig.SECURE_CLIENT, "true");

        conf.setProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET, "org.apache.zookeeper.ClientCnxnSocketNetty");

        // If not already set in zoo-client.cfg then set the followings here.
        conf.setProperty(ZKClientConfig.SSL_KEYSTORE_LOCATION, configPath + "/keystore");
        conf.setProperty(ZKClientConfig.SSL_KEYSTORE_PASSWD, "some_pass");
        conf.setProperty(ZKClientConfig.SSL_TRUSTSTORE_LOCATION, configPath + "/keystore");
        conf.setProperty(ZKClientConfig.SSL_TRUSTSTORE_PASSWD, "some_pass");

        return conf;
    }

    private ZKClientConfig getNonSecureConfig() throws ConfigException {
        // Get common configurations which are application for all the clients
        ZKClientConfig conf = getCommonConfig();
        // set non secure specific properties
        conf.setProperty(ZKClientConfig.SECURE_CLIENT, "fasle");
        return conf;
    }

    /**
     * ZooKeeper client common configuration can be put in any file. Lets say it
     * is zoo-client.cfg.<br>
     * zoo-client.cfg may contains all the client properties and then specific
     * clients can override the properties of their interest.<br>
     * <code>
     * ZKClientConfig conf = getCommonConfig();
     * conf.setProperty(ZKClientConfig.SECURE_CLIENT, "true");
     * </code>
     * 
     * Here is sample content of zoo-client.cfg.
     * 
     * <pre>
     * zookeeper.sasl.client.username=zookeeper
     * zookeeper.sasl.clientconfig=Client
     * zookeeper.sasl.client=true
     * zookeeper.disableAutoWatchReset=false
     * zookeeper.client.secure=false
     * zookeeper.ssl.keyStore.location=keystore
     * zookeeper.ssl.keyStore.password=password
     * zookeeper.ssl.trustStore.location=truststore
     * zookeeper.ssl.trustStore.password=password
     * zookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNIO
     * </pre>
     */
    private ZKClientConfig getCommonConfig() throws ConfigException {

        File configFile = new File(configPath + "/zoo-client.cfg");
        ZKClientConfig clientConfig = new ZKClientConfig(configFile);
        // Set common java system properties. These can be passed even while
        // starting the client using -D JVM option
        System.setProperty("java.security.auth.login.config", configPath + "/jass.conf");
        // this is not required if already configured at OS level
        System.setProperty("java.security.krb5.conf", configPath + "/krb5.conf");
        return clientConfig;
    }

    /**
     * This class does continues create or update operation on passed ZooKeeper
     * instance.
     */
    class ZKOperationThread extends Thread {
        private ZooKeeper zookeeper;
        private String path;

        public ZKOperationThread(ZooKeeper zookeeper, String path) {
            this.zookeeper = zookeeper;
            this.path = path;
        }

        @Override
        public void run() {
            while (true) {
                try {
                    Thread.sleep(1000);
                    doZKOperations(zookeeper, path);
                } catch (KeeperException | InterruptedException e) {
                    e.printStackTrace();
                    break;
                }
            }
            System.out.println("Done for '" + path + "'.");
        }
    }

    class ZKWatcher implements Watcher {
        private ZKClientConfig conf;
        private String cxnString;
        private CountDownLatch countDownLatch;

        public ZKWatcher(ZKClientConfig conf, String cxnString, CountDownLatch countDownLatch) {
            this.conf = conf;
            this.cxnString = cxnString;
            this.countDownLatch = countDownLatch;
        }

        @Override
        public void process(WatchedEvent watchedEvent) {
            if (watchedEvent.getType() == EventType.None) {
                KeeperState state = watchedEvent.getState();
                if (state == KeeperState.SyncConnected) {
                    System.out.println("Connected");
                    countDownLatch.countDown();

                } else if (state == KeeperState.Disconnected) {
                    System.out.println("Disconnected");

                } else if (state == KeeperState.SaslAuthenticated) {
                    System.out.println("SaslAuthenticated");
                }

                else if (state == KeeperState.AuthFailed) {
                    System.out.println("AuthFailed");
                } else if (state == KeeperState.Expired) {
                    System.out.println("Expired.");
                    try {
                        connectToZookeeper(conf, cxnString);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    System.out.println(state);
                }
            } else {
                System.out.println("watchedEvent.getType()=" + watchedEvent.getType().toString());
            }

        }
    }
}